; Programming Languages, Dan Grossman
; Section 6: Datatype Programming in Racket Without Structs

#lang racket
(provide (all-defined-out))

; we do not need a datatype to create a list holding a mix of numbers and string
; Note: arguably bad style to not have else clause but makes example more like ML code
(define (funny-sum xs)
  (cond [(null? xs) 0]
        [(number? (car xs)) (+ (car xs) (funny-sum (cdr xs)))]
        [(string? (car xs)) (+ (string-length (car xs)) (funny-sum (cdr xs)))]))

; suppose we wanted a "one-of type" using nothing but lists and symbols and such, like ML's 
; datatype exp = Const of int | Negate of exp | Add of exp * exp | Multiply of exp * exp

; just helper functions that make lists where first element is a symbol
; Note: More robust could check at run-time the type of thing being put in
